generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://chats_owner:npg_VsuSd9Nzw8CI@ep-cool-bar-a1hxk2iv-pooler.ap-southeast-1.aws.neon.tech/chats?sslmode=require"
}

model User {
  id                   Int                      @id @default(autoincrement())
  email                String                   @unique
  passwordHash         String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @default(now())
  name                 String?
  authProvider         AuthProvider
  currentCoversationId Int?
  isOnline             Boolean                  @default(false)
  lastSeen             DateTime                 @default(now())
  receivedInvitations  ConversationInvitation[] @relation("InvitationsReceived")
  sentInvitations      ConversationInvitation[] @relation("InvitationsSent")
  imageGenerations     ImageGeneration[]        @relation("UserImageGenerations")
  messages             Message[]                @relation("MessageAuthor")
  QueryResps           QueryResp[]
  tempMessages         TempMessage[]            @relation("TempMessages")
  tempRoomsCreated     TempRoom[]               @relation("TempRoomsCreated")
  currentConversation  Conversation?            @relation("CurrentConversation", fields: [currentCoversationId], references: [id])
  conversations        Conversation[]           @relation("UserConversations")

  @@index([email])
  @@index([currentCoversationId])
  @@index([isOnline])
}

model Model {
  modelId    Int              @id @default(autoincrement())
  type       ModelType        @default(ollama)
  name       ModelNameOllama?
  nameOnline ModelNameOnline?
  lastReadAt DateTime         @default(now())
  isActive   Boolean          @default(true)
  messages   Message[]
  QueryResps QueryResp[]

  @@index([isActive])
  @@index([type])
}

model Conversation {
  id            Int                      @id @default(autoincrement())
  roomName      String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @default(now())
  aiEnabled     Boolean                  @default(false)
  aiModel       String?
  lastMessageAt DateTime                 @default(now())
  type          ConversationType         @default(team)
  roomId        String?                  @unique
  invitations   ConversationInvitation[]
  messages      Message[]
  queries       QueryResp[]              @relation("ConversationQueries")
  currentUsers  User[]                   @relation("CurrentConversation")
  users         User[]                   @relation("UserConversations")

  @@index([type])
  @@index([aiEnabled])
  @@index([lastMessageAt])
}

model ConversationInvitation {
  id             Int              @id @default(autoincrement())
  inviterUserId  Int
  invitedUserId  Int
  conversationId Int
  status         InvitationStatus @default(pending)
  message        String?
  expiresAt      DateTime?
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  invited        User             @relation("InvitationsReceived", fields: [invitedUserId], references: [id])
  inviter        User             @relation("InvitationsSent", fields: [inviterUserId], references: [id])

  @@unique([inviterUserId, invitedUserId, conversationId])
  @@index([invitedUserId, status])
  @@index([conversationId])
  @@index([status])
}

model Message {
  id              Int          @id @default(autoincrement())
  content         String
  role            String
  conversationId  Int
  userId          Int
  parentMessageId Int?
  isEdited        Boolean      @default(false)
  originalContent String?
  editReason      String?
  modelId         Int?
  createdAt       DateTime     @default(now())
  aiPrompt        String?
  deletedAt       DateTime
  isDeleted       Boolean      @default(false)
  messageType     MessageType  @default(user)
  updatedAt       DateTime     @updatedAt
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  model           Model?       @relation(fields: [modelId], references: [modelId])
  parentMessage   Message?     @relation("MessageBranch", fields: [parentMessageId], references: [id])
  childMessages   Message[]    @relation("MessageBranch")
  user            User         @relation("MessageAuthor", fields: [userId], references: [id])

  @@index([conversationId])
  @@index([messageType])
  @@index([parentMessageId])
  @@index([userId])
  @@index([createdAt])
}

model QueryResp {
  id             Int          @id @default(autoincrement())
  query          String
  result         String
  modelId        Int
  userId         Int
  conversationId Int
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation("ConversationQueries", fields: [conversationId], references: [id])
  ModelUsed      Model        @relation(fields: [modelId], references: [modelId])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([conversationId])
  @@index([createdAt])
}

model TempRoom {
  id          Int            @id @default(autoincrement())
  roomId      String         @unique
  roomCode    String         @unique
  createdBy   String
  usersEmails String[]
  expiryTime  DateTime
  createdAt   DateTime       @default(now())
  status      TempRoomStatus @default(active)
  maxUsers    Int            @default(10)
  roomName    String?
  messages    TempMessage[]
  creator     User           @relation("TempRoomsCreated", fields: [createdBy], references: [email])

  @@index([roomCode])
  @@index([expiryTime])
  @@index([status])
  @@index([createdBy])
}

model TempMessage {
  id            Int      @id @default(autoincrement())
  messageId     String   @unique
  roomId        String
  userEmail     String?
  content       String
  timestamp     DateTime @default(now())
  messageType   String   @default("user")
  isAiGenerated Boolean  @default(false)
  aiModelUsed   String?
  room          TempRoom @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  user          User?    @relation("TempMessages", fields: [userEmail], references: [email])

  @@index([roomId])
  @@index([userEmail])
  @@index([timestamp])
}

model ImageGeneration {
  id        Int      @id @default(autoincrement())
  prompt    String
  imageUrls String[] @default([])
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation("UserImageGenerations", fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

enum TempRoomStatus {
  active
  expired
}

enum ModelType {
  ollama
  online
}

enum ModelNameOllama {
  gemma3_27b
  llama3_3_70b
  deepseek_r1_70b
  phi4_14b
}

enum ModelNameOnline {
  gemini2_5_flash
  gemini2_5_pro
  deepseekv3
  claude4_0
}

enum AuthProvider {
  jwt
  oauth
}

enum InvitationStatus {
  pending
  accepted
  declined
  expired
}

enum MessageType {
  user
  ai
  system
}

enum ConversationType {
  team
  direct
  ai_enabled
}
