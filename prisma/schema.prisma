// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-py"
  recursive_type_depth  = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ModelType {
  ollama
  online
}

enum ModelNameOllama {
  gemma3_27b
  llama3_3_70b
  deepseek_r1_70b
  phi4_14b
}

enum ModelNameOnline {
  gemini2_5_flash
  gemini2_5_pro
  deepseekv3
  claude3_5
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  passwordHash String?
  QueryResps QueryResp[]
  messages Message[] @relation("MessageAuthor")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")

  @@index([email])
}

model Model {
  modelId Int @id @default(autoincrement())
  type ModelType @default(ollama)
  name ModelNameOllama @default(gemma3_27b)
  nameOnline ModelNameOnline @default(gemini2_5_flash)
  QueryResps QueryResp[]
  messages Message[]
  lastReadAt DateTime @default(now())
  isActive Boolean @default(true)

  @@index([isActive])
}



model Conversation {
  id        Int      @id @default(autoincrement())
  users     User[]   @relation("UserConversations")
  roomName String 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  queries QueryResp[] @relation("ConversationQueries")
  messages Message[]

  @@index([roomName])
}

//new message model created(its QueryResp model with adddional fields), also keeping the original QueryResp model for reference
model Message {
  id Int @id @default(autoincrement())
  content String
  role String
  conversationId Int
  userId Int
  parentMessageId Int?
  isEdited Boolean @default(false)
  originalContent String?
  editReason String?
  modelId Int?
  createdAt DateTime @default(now())
  
  // relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user User @relation("MessageAuthor", fields: [userId], references: [id])
  model Model? @relation(fields: [modelId], references: [modelId])
  parentMessage Message? @relation("MessageBranch", fields: [parentMessageId], references: [id])
  childMessages Message[] @relation("MessageBranch")

  @@index([conversationId])
  @@index([parentMessageId])
}

model QueryResp {
  id Int @id @default(autoincrement())
  query String
  result String
  ModelUsed Model @relation(fields: [modelId], references: [modelId])
  modelId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  conversation Conversation @relation("ConversationQueries", fields: [conversationId], references: [id])
  conversationId Int
  createdAt DateTime @default(now())
}

